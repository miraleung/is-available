<?php

/**
 * @file
 * A block module that displays resources for CS event bookings.
 * 
 * To add a building/resource type, or change the order of the elements in 
 * the dropdown, update the array in the relevant initializer function.
 */

/* Error reporting */
error_reporting(E_ALL);
ini_set('display_errors', TRUE);
ini_set('display_startup_errors', TRUE);


/**
 * Implements hook_menu().
 */
function is_available_menu() {
	$items = array();
	$items['is_available/form'] = array(
		'title' => t('Search for available resources'), 
		'page callback' => 'is_available_form', 
		'page arguments' => array(1, 0),
		'access arguments' => array('access content'), 
		'description' => t('Search for a resource'), 
		'type' => MENU_CALLBACK,
	);
	
	$module_name = 'is_available';

	$items['admin/config/is_available'] = array(
		'title' => t('Is Available'),
		'description' => t('Configure block settings for Is Available'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('is_available_settings', $module_name),
		'access arguments' => array('administer is_available'),
		'file' => 'is_available.admin.inc',
	);
	
	$items['admin/config/is_available/settings'] = array(
		'title' => t('Block Setting Configuration'),
		'description' => t('Create or configure a block display setting'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('is_available_settings', $module_name),
		'access arguments' => array('administer is_available'),
		'file' => 'is_available.admin.inc',
	);

	return $items;
}

/**
 * Forms 
 */

/**
 * Implements hook_form().
 */
function is_available_form() { 
	return drupal_get_form('is_available_resource_search_form');
} 


/**
 * Setup for the searching form.
 * @param $resource_types The resource type array initialized by initialize_resource_type.
 */
function is_available_resource_search_form($form, $form_state, $array_et = array(), $multi_id = NULL) {
	
	if (empty($array_et)) {
		drupal_set_message("Error: No searchable entity types detected. Please check your settings.", 'error');
		return;
	}
	
	$resource_types 				= array(); // array($rt_machine_name => ResourceType object)
	$resource_type_options	= array(); // array($rt_str_id			 => $rt_object->get_title())
	$buildings 							= array(); // array($bldg_str_id		 => Building object)
	$all_building_options 	= array(); // array($bldg_str_id		 => $bldg_object->get_name())
	$array_fbld_field 			= array(); // array(FBLD$i 					 => field_building_field_name)
	$array_frn_field				= array(); // array(FRN$i 					 => field_resource_number_field_name)
	
	$all = '- All -';
	
	initialize_resource_types_and_buildings_and_options($array_et, $resource_types, $resource_type_options, $buildings, $all_building_options, $array_fbld_field, $array_frn_field, $all);
	
	// if it has only the - All - option, return
	if (sizeof($resource_type_options) <= 1 || empty($resource_types)) { 
		drupal_set_message("Error: No searchable resource types detected. Please check your settings.", 'error');
		return;
	}
	
	// if it has only the - All - option, return
	if (sizeof($all_building_options) <= 1 || empty($buildings)) { 
		drupal_set_message("Error: No searchable buildings detected. Please check your settings.", 'error');
		return;
	}
	
	// Constants
	$date_size = 10;
	
	// // Time constants
	date_default_timezone_set('America/Vancouver');
	$date_format = 'Y-m-d H:i';
	// $query_date_format = 'Y-m-d H:i';
	$current_time = date($date_format);
	$current_time_rounded = round_to_nearest_15_minutes($current_time, 0, $date_format); 
	$current_time_plus_hour = date($date_format, time() + 3600);
	$current_time_plus_hour_rounded = round_to_nearest_15_minutes($current_time_plus_hour, 1, $date_format); 
	dpm($current_time);
	// Set the calendar
	if (!isset($form_state['values']['cal_popup_start']))
		$form_state['values']['cal_popup_start'] = $current_time_rounded;
	if (!isset($form_state['values']['cal_popup_end']))
		$form_state['values']['cal_popup_end'] = $current_time_plus_hour_rounded;
	
	$value_start_time = isset($form_state['values']['cal_popup_start']) ? 
		$form_state['values']['cal_popup_start'] : $current_time_rounded;
	$value_end_time = isset($form_state['values']['cal_popup_end']) ?
		$form_state['values']['cal_popup_end'] : $current_time_plus_hour_rounded;
	$value_building_name = isset($form_state['values']['building_name']) ?
		$form_state['values']['building_name'] : NULL;

	// $query_start_time = get_mysql_24h_date($value_start_time);
	// $query_end_time = get_mysql_24h_date($value_end_time);
		// dpm($value_start_time); dpm($value_end_time);
	// dpm($query_start_time); dpm($query_end_time);
	
	// Dropdowns and their currently selected value
	$value_resource_type = isset($form_state['values']['type']) ? 
		$form_state['values']['type'] : key($resource_type_options);
	$dropdown_building_options = isset($form_state['values']['type']) ? 
		get_dropdown_building_options($resource_types, $value_resource_type, 
		$all_building_options, $all) : $all_building_options;
	$value_dropdown_building = isset($form_state['values']['building_name']) ? 
		$form_state['values']['building_name'] : key($dropdown_building_options);
	$value_available_resources = is_available_available_resources(
			$value_dropdown_building, $dropdown_building_options, 
			//$query_start_time, $query_end_time,   
			$value_start_time, $value_end_time,  
			$value_resource_type, $array_et, $resource_types, $array_fbld_field, $array_frn_field, $all,
			$date_format); 
		
	// Markup the form
	$form['#prefix'] = '<div class="search-form">';
	$form['#suffix'] = '</div>';
	
	// Resource type
 	$form['type'] = array(
		'#type' => 'select',
		'#title' => t('Resource type'),
		'#default_value' => $resource_type_options,
		'#options' => $resource_type_options,
		'#ajax' => array( // autosubmit to get buildings onChange
			'callback' => 'ajax_get_buildings_callback',	
			'event' => 'change',
			'wrapper' => 'building-name-' . $multi_id,
			'method' => 'replace',
			'effect' => 'fade',
		),
		'#prefix' => '<div class="resource-type-' . $multi_id . '">',
		'#suffix' => '</div>',
	);
	
	// Building options
	$form['building_name'] = array(
		'#type' => 'select',
		'#title' => t('Building'),
		'#options' => $dropdown_building_options,
		'#default_value' => $value_dropdown_building,
		'#prefix' => '<div id="building-name-' . $multi_id . '">',
		'#suffix' => '</div>',
	);

	// Start date/time
	$form['cal_popup_start'] = array(
		'#type' => 'date_popup', 
		'#date_format' => 'Y-m-d h:iA',
		'#title' => t('Start Date'),
		'#description' => '',
		'#default_value' => $value_start_time,
		'#date_increment' => 15,
		'#date_year_range' => '0:+1',
		'#size' => $date_size,
		'#attributes' => array(
			'onclick' => 'GetdatePicker(this);',
			),
		'#prefix' => '<div class="cal-popup-start">',
		'#suffix' => '</div>',
		);
	
	// End date/time
	$form['cal_popup_end'] = array(
	'#title' => t('End Date'), 
	'#type' => 'date_popup', 
	'#date_format' => 'Y-m-d h:iA',
	'#description' => '',
	'#default_value' => $value_end_time,
	'#date_increment' => 15,
	'#date_year_range' => '0:+1',
	'#size' => $date_size,
	'#attributes' => array(
		'onclick' => 'GetdatePicker(this);',
		),
	'#prefix' => '<div class="cal-popup-end">',
	'#suffix' => '</div>',
	);
	
		// "Check for availability" button
 	$form['check_availability'] = array(
		'#type' => 'button',
		'#value' => t('Search'),
		'#button_type' => 'submit ajax-trigger',
 		'#ajax' => array(
			'submitter' => FALSE,
			'callback' => 'ajax_available_resources_callback', 
			'event' => 'mousedown',
			'wrapper' => 'available-resources-' . $multi_id,
			'method' => 'replace',
			'effect' => 'fade',
		),  
		'#prefix' => '<div class="search" >', 
		'#suffix' => '</div>',
	);
	
		// "Reset fields" button (clears form and reloads the page)
	$form['clear'] = array(
		'#type' => 'submit',
		'#value' => t('Reset fields'), 
		'#validate' => 'is_available_resource_search_form_clear',
		'#prefix' => '<div class="reset-fields">', 
		'#suffix' => '</div>',		
	); 

	// Available resources display (result)
	$form['available_resources'] = array(
		'#markup' =>  '<p>' . $value_available_resources	. '</p>',
		'#prefix' => '<div id="available-resources-' . $multi_id . '">',
		'#suffix' => '</div>',
	);	

	return $form;
}

/**
 * AJAX callback for dependent building options.
 *
 * @return Renderable array (the building dropdown)
 */
function ajax_get_buildings_callback(&$form, &$form_state) {
	unset($form_state['input']['building_name']);
	unset($form_state['values']['building_name']);
	return $form['building_name'];
}

/**
 * AJAX callback for repainting the available resource (results) display.
 *
 * @return Renderable array (the results display)
 */
function ajax_available_resources_callback(&$form, &$form_state) {
  unset($form_state['input']['available_resources']);
	unset($form_state['values']['available_resources']);
  return $form['available_resources'];
}

/**
 * Get the resource type options.
 * 
 * @param $resource_types The resource types array initialized by initialize_resource_type
 * @return Assoc array of resource ids => readable name
 */
function is_available_resource_type_options(&$resource_types) {
	$resource_type_options = array();
	foreach ($resource_types as $rt) {
		if ($rt->get_auth_display() == 1) {
			$resource_type_options[$rt->get_str_id()] = t($rt->get_title());
		}
	}
	return $resource_type_options;
}

/**
 * Get the building options.
 * 
 * @return Assoc array of building ids => readable name
 */
function is_available_building_options(&$buildings) { 
	$building_options = array();
	foreach ($buildings as $b) {
		$building_options[$b->get_str_id()] = t($b->get_name());
	}
	return $building_options;
}

/**
 * Get the building options based on the current resource type.
 */
function get_dropdown_building_options($resource_types, 
	$value_resource_type, $all_building_options, $all) {
	
 	if ($value_resource_type == $all || empty($resource_types) ||
		!in_array($value_resource_type, array_keys($resource_types))) {
		if ($value_resource_type == $all) 
			return $all_building_options;
	}
	
	$building_options = array();
	$resource_buildings = $resource_types[$value_resource_type]->get_buildings();
	if (sizeof($resource_buildings) > 1) $building_options[$all] = $all;
	
	foreach ($resource_buildings as $bldg_name => $object)
		$building_options[$bldg_name] = $object->get_name();
	return $building_options;
}

/**
 * Validation handler (to clear and reload the form)
 */
function is_available_resource_search_form_clear($form, $form_state) {
	$form_state['rebuild'] = TRUE;
}

/**
 * ===============================================
 * QUERY HELPERS
 * ===============================================
 */

/**
 * Query for available resources matching the form criteria.
 *
 * @param $building_id The string id of the building, e.g. building0
 * @param $start_time The start date and time of the query
 * @param $end_time The end date and time of the query
 * @param $resource_type The string id of the resource type e.g. type0
 * @param $array_et Array of entity types
 *
 * @return $result The available resources as a string, with added context.
 */
function is_available_available_resources($building_id, $building_options, $start_time, $end_time, 
	$resource_type = '- All -', $array_et, $resource_types, $array_fbld_field, 
	$array_frn_field, $all, $date_format) {
	
	// Constants
	$query = '';
	$sql_query = '';
	$time_interval = 'from ' . $start_time . ' to ' . $end_time;
	$type = '';
	$building_name = '';
	
	if ($resource_type != $all) {
		foreach ($array_et as $et_machine_name => $et_object) {
			$type = array_search($resource_type, $et_object->get_resource_types());
			if (!empty($type)) break;
		}
	} else 
		$type = 'resource types';
	if ($building_id != $all) {
		$building_name = $building_options[$building_id];
	} else {
		$building_name = $all;
	}

	$header = 'Available ' . $type;
	$resource_result = '';
	$result = '';
	$resultset = array();
	
	if ($start_time >= $end_time) {
		$result = 'Error: Start date/time must precede end date/time. ' . $start_time . ' ' . $end_time;
	} else {
		$result = execute_query($building_name, $start_time, $end_time, $resource_type, $array_et, $all,
			$resource_types, $array_fbld_field, $array_frn_field, $date_format);
	}
	return t($result);
}

/**
 * string string string string (arrayof EntityTaipe) string -> string
 * Builds and executes the available-resource query.
 *
 * @param $building_name The human-readable name of the building
 * @param $start_time The start date/time of the event, in DATE_FORMAT
 * @param $end_time The start date/time of the event, in DATE_FORMAT
 * @param $resource_type The resource type's id.
 * @param $array_et Array of entity types
 * @param	$all String representing the "all" option
 *
 * @return $result Human-readable string result of the query. 
 */
function execute_query($building_name, $start_time, $end_time, $resource_type, $array_et, $all,
	$resource_types, $array_fbld_field, $array_frn_field, $date_format) {
	$all_resources = ($resource_type == $all);
	$all_buildings = ($building_name == $all);
	$query_object = get_empty_resource_query_object($building_name, $start_time, $end_time, 
		$resource_type, $array_et, $resource_types, $array_fbld_field, $array_frn_field,
		$all_resources, $all_buildings, $date_format);
	$drop_temp_query = $query_object->get_drop_temp();
	$create_temp_query = $query_object->get_create_temp();
	$mysql_query = $query_object->get_main_query();
	dpm("get_query: " . $mysql_query);
	$get_result = 1;
	if (!is_string($mysql_query)) $get_result = $mysql_query;
	else if (trim($mysql_query) == "") $get_result = -2;	

	if ($get_result == 1) {
		db_query($drop_temp_query);
		if (strlen($create_temp_query) > 51) db_query($create_temp_query);
	}
	
	// 1: get the result; -2, -1, 0: don't bother
	// -2: No eneity types or empty sql query
	// -1: All buildings with specific resource type; no such resource type
	// 0 : specific building & specific resource type;; no such resource in that building 
	
	$result = get_empty_resource_query_result(
		$mysql_query, $building_name, $start_time, 
		$end_time, $resource_type, $resource_types, $buildings, $all_resources, $all_buildings, $get_result
	);
	return $result;
}

/**
 * string string string string (arrayof EntityTaipe) string -> string
 * Build up the available-resource query, based on the form input.
 *
 * @param $building_name The human-readable name of the building
 * @param $start_time The start date/time of the event, in DATE_FORMAT
 * @param $end_time The start date/time of the event, in DATE_FORMAT
 * @param $resource_type The resource type's id.
 * @param $array_et Array of entity types
 * @param $all '- All -' option
 * 
 * @return $mysql_query The string query, to be executed by another helper.
 */
function get_empty_resource_query_object($building_name, $start_time, $end_time, $resource_name, $array_et,
	$resource_types, $array_fbld_field, $array_frn_field, $all_resources, $all_buildings, $date_format) {
	
	if (empty($array_et)) {
		drupal_set_message("Error: No searchable entity types detected. Please check your settings.", "error");
		$bldg_check_str = -2;
		$query_object = new EmptyResourceQuery(0, 0, $bldg_check_str);
		return $query_object;
	}
	
	// Constants
	$gmt_start_time = gmdate($date_format, strtotime($start_time));
	$gmt_end_time = gmdate($date_format, strtotime($end_time));
	
	$gmt_start_time .= ":00";
	$gmt_end_time .= ":00";
	
	$check = get_bldg_rn_condition_int($all_resources, $all_buildings); 	

	$and_paren =  " AND (";
	$and_paren_strlen = strlen($and_paren);
	$and = " AND ";
	$and_strlen = strlen($and);
	$where_paren = " WHERE (";
	$where_paren_strlen = strlen($where_paren);
	
	// Assumes unique machine names for each resource type, building
	$et_i = 0;
	$temp_table_name = 'is_available_temp';
	$et_select_str = '';
	$et_inner_join_str = "FROM eck_bundle EB ";
	$et_where_eb_str = $where_paren;
	$date_check = " AND '" . $gmt_start_time . "' < '" . $gmt_end_time . "' ";
	
	$bldg_check_str = $and_paren;
	
	$select_str = "SELECT ";
	
	$and_not_exists = " AND NOT EXISTS (SELECT * FROM " . $temp_table_name . " Temp WHERE ";
	$temp_field_name = "";
	
	$not_in_str = $and_not_exists;
	
	$fbld_frn_inner_join_str = "";
	$array_fbld_been_here = array();
	$array_frn_been_here = array();
	
	$delete_temp_table = "DROP TEMPORARY TABLE IF EXISTS " . $temp_table_name;
	$nested_query_temp_table = "CREATE TEMPORARY TABLE " . $temp_table_name . " AS ";
	
	foreach ($array_et as $et_machine_name => $et_object) {
		$et_i_str = "ET" . $et_i;
		if ($all_resources) build_et_select_query_str($et_select_str, $et_i_str);
		build_et_inner_join_eb_et_query_str($et_inner_join_str, $et_where_eb_str, $et_object, $et_i_str);

		if (!$et_object->get_resource_types()) {
			drupal_set_message("Error: No searchable resource types detected for " . $et_object->get_name() .
				". Please check your settings.", "error");
			$bldg_check_str = -1;
			break;
		}
		
		foreach ($et_object->get_resource_types() as $rt_machine_name => $rt_object) {
			// Build building check part of query
			switch ($check) {
			case 0: // all rt all b
				build_all_b_bldg_check($bldg_check_str, $et_i_str, $rt_object, $array_fbld_field);
				break;
			case 1: // all rt specific b
				build_specific_b_bldg_check($bldg_check_str, $building_name,
					$et_i_str, $rt_object, $array_fbld_field, $check);
				break;
			case 2: // specific rt all b
				if ($resource_name == $rt_object->get_machine_name()) {
					build_all_b_bldg_check($bldg_check_str,	$et_i_str, $rt_object, $array_fbld_field);
				}
				break;
			case 3: // specific rt specific b
				if ($resource_name == $rt_object->get_machine_name()) {
					build_specific_b_bldg_check($bldg_check_str, $building_name,
						$et_i_str, $rt_object, $array_fbld_field, $check);
				}
				break;
			}
			// Build building and resource number inner join table
			build_fbld_frn_inner_join_str($fbld_frn_inner_join_str, $rt_object, $array_fbld_been_here,
				$array_frn_been_here, $array_fbld_field, $array_frn_field, $et_i_str);
		}
		$et_i++;
	}
	
	$mysql_query = '';
	
	// If you are not allowed to search over this building for this resource type, 
	// return an integer flag
	if (!is_string($bldg_check_str)) {
		$mysql_query = $bldg_check_str; 
		$query_object = new EmptyResourceQuery(0, 0, $mysql_query);
		return $query_object;
	}	
	
	$temp_table_field = "";
	// Build the inner nested query (temporary table)
	build_nested_temp_query($nested_query_temp_table, $temp_table_field, $resource_types, 
		$start_time, $end_time);
		
	if (!empty($et_select_str)) $et_select_str = substr($et_select_str, 0, -2) . " ";
	build_select_str_and_not_in($select_str, $not_in_str, $temp_table_name, $temp_table_field, 
		$array_fbld_field, $array_frn_field, $et_select_str, $all_resources, $all_buildings);
	$et_where_eb_str = (substr($et_where_eb_str, -$where_paren_strlen) == $where_paren) ? 
		"" : substr($et_where_eb_str, 0, -4) . ") ";

	$bldg_check_str = (substr($bldg_check_str, -$and_paren_strlen) == $and_paren) ?
		"" : substr($bldg_check_str, 0, -4) . ") ";
	$not_in_str = (substr($not_in_str, -$and_strlen) == $and) ? "" : $not_in_str;
	$et_where_eb_str .= $date_check;
	
	$inner_join_where_str = $et_inner_join_str . $fbld_frn_inner_join_str . $et_where_eb_str;
	
	$mysql_query = $select_str . $inner_join_where_str . $bldg_check_str . $not_in_str;
	$query_object = new EmptyResourceQuery($delete_temp_table, $nested_query_temp_table, $mysql_query);
	return $query_object;
}

function get_bldg_rn_condition_int($all_resources, $all_buildings) {
	$check = 0; // all_resources && all_buildings
	if ($all_resources && !$all_buildings) $check = 1; // all_resources && specific bldg
	else if (!$all_resources && $all_buildings) $check = 2; // specific resource && all_bldgs
	else if (!$all_resources && !$all_buildings) $check = 3; // specific resource && specific bldg
	return $check;
}

/**
 * Query builders
 */
function build_et_select_query_str(&$et_select_str, $et_i_str) {
	$et_select_str .= $et_i_str . ".type, ";
}

function build_et_inner_join_eb_et_query_str(&$et_inner_join_str, &$et_where_eb_str, $et_object, $et_i_str) {
	$et_inner_join_str .= "INNER JOIN " . $et_object->get_eck_table() . " " . $et_i_str . 
		" ON " .	$et_i_str . ".type = EB.name ";
	$et_where_eb_str .= "EB.entity_type = '" . $et_object->get_machine_name() . "' OR ";
}

function build_all_b_bldg_check(&$bldg_check_str, $et_i_str, $rt_object, $array_fbld) {
	$buildings = $rt_object->get_buildings();
	if (empty($buildings)) return;
	
	$fbld_name = $rt_object->get_field_building();
	$fbld_table = get_field_table($fbld_name);
	$fbld_field = get_field_column($fbld_name);
	$fbld_key = array_search($fbld_name, $array_fbld);
	
	$bldg_check_str .= "(" . $et_i_str . ".type = '" . $rt_object->get_machine_name() . "' AND (";
	foreach ($rt_object->get_buildings() as $bldg_str_id => $bldg_object) {
		$bldg_check_str .= $fbld_key . "." . $fbld_field . " = '" . $bldg_object->get_name() . "' OR ";
	}
	$bldg_check_str = substr($bldg_check_str, 0, -4) . ")) OR ";
}

function build_specific_b_bldg_check(&$bldg_check_str, $building_name,
	$et_i_str, $rt_object, $array_fbld_field, $check = 1) {
	$buildings = $rt_object->get_buildings();
		
	if (!is_string($bldg_check_str) && $check == 3) return;
	
	if (empty($buildings) || !array_key_exists($building_name, $buildings)) {
		if ($check == 3) $bldg_check_str = 0; // none of these resource types in this building
		return;
	}
	
	$fbld_name = $rt_object->get_field_building();
	$fbld_table = get_field_table($fbld_name);
	$fbld_field = get_field_column($fbld_name);
	$fbld_key = array_search($fbld_name, $array_fbld_field);

	$bldg_check_str .= "(" . $et_i_str . ".type = '" . $rt_object->get_machine_name() . "' AND " .
		$fbld_key . "." . $fbld_field . " = '" . $building_name . "') OR ";
}

function build_fbld_frn_inner_join_str(&$fbld_frn_inner_join_str, $rt_object, 
	&$array_fbld_been_here, &$array_frn_been_here, $array_fbld_field, $array_frn_field, $et_i_str) {
	
	$field_building = $rt_object->get_field_building();
	$field_rn = $rt_object->get_field_room_number();
	$fbld_key = array_search($field_building, $array_fbld_field);
	$frn_key = array_search($field_rn, $array_frn_field);
	if (!$fbld_key || !$frn_key) {
		drupal_set_message("Error in build_fbld_frn_inner_join_str: " . $field_building . " or " . 
			$field_rn . " was not detected in the selection list.", "error");
		return;
	}
	if (in_array($fbld_key, $array_fbld_been_here)) return;
	$bldg_table = $rt_object->get_building_table();
	$bldg_field = $rt_object->get_building_field();
	$fbld_frn_inner_join_str .= " INNER JOIN " . $bldg_table . " "  . $fbld_key . 
		" ON " . $fbld_key . ".entity_id = " . $et_i_str . ".id ";
	array_push($array_fbld_been_here, $fbld_key);
	
	if (in_array($frn_key, $array_frn_been_here)) return;
	$rn_table = $rt_object->get_room_number_table();
	$rn_field = $rt_object->get_room_number_field();
	$fbld_frn_inner_join_str .= "INNER JOIN " . $rn_table . " " . $frn_key .
		" ON " . $frn_key . ".entity_id = " . $fbld_key . ".entity_id ";
	array_push($array_frn_been_here, $frn_key);	
}

function build_select_str_and_not_in(&$select_str, &$not_in_str, $temp_table_name, $temp_table_field, 
	$array_fbld_field, $array_frn_field, $et_select_str, $all_resources, $all_buildings) {

	// otherwise, if a specific building, no need to get the field building returned
	if ($all_buildings) {
		foreach ($array_fbld_field as $key => $value) {
			$value = get_field_column($value);
			$select_str .= $key . "." . $value . ", ";
		}
	}
	foreach ($array_frn_field as $key => $value) {
		$value = get_field_column($value);
		$select_str .= $key . "." . $value . ", ";
		$not_in_str .= $key . ".entity_id = Temp." . $temp_table_field . " OR ";
	}
	
	$not_in_str = substr($not_in_str, 0, -4) . ")"; // remove last " OR "
	if (!$all_resources) 	$select_str = substr($select_str, 0, -2) . " "; // remove last ", "
	else 							$select_str .= $et_select_str; 
}

function build_nested_temp_query(&$nested_query_temp_table, &$temp_table_field, 
	$resource_types, $start_time, $end_time) {

	foreach ($resource_types as $rt_machine_name => $rt_object) {
		$entref_date_table = $rt_object->get_entref_date_table(); // array
		if (!$entref_date_table || empty($entref_date_table)) {
				drupal_set_message("Error: No entity reference or date table detected for " 
					. $rt_object->get_title() . ". Please check your settings.");
				return;
			}
		foreach ($entref_date_table as $entref => $date) {
		
			if (!$entref) {
				drupal_set_message("Error: No entity reference table detected for " . $rt_object->get_title() . 
					". Please check your settings.");
				return;
			}
			
			if (!$date) {
				drupal_set_message("Error: No date table detected for " . $rt_object->get_title() . 
					". Please check your settings.");
				return;
			}

			$entref_target_id = $entref . "_target_id";
			if (trim($temp_table_field) == "")
				$temp_table_field = $entref_target_id;
		
			$entref_field = "FER." . $entref_target_id;
			$entref_table = get_field_table($entref);
			$date_field1 = "FDTE." . $date . "_value";
			$date_field2 = $date_field1 . "2";
			$date_table = get_field_table($date);
			
			// Build the string
			$nested_query_temp_table .= "SELECT " . $entref_field . " FROM " . $date_table . " FDTE " .
			"INNER JOIN " . $entref_table . " FER ON FER.entity_id = FDTE.entity_id WHERE (" . 
			$date_field1 . " < '" . $start_time . "' AND '" . $start_time . "' < " . $date_field2 . ") OR (" .
			$date_field1 . " < '" . $end_time . "' AND '" . $end_time . "' < " . $date_field2 . ") OR ((" .
			$date_field1 . " BETWEEN '" . $start_time . "' AND '" . $end_time . "') AND (" .
			$date_field2 . " BETWEEN '" . $start_time . "' AND '" . $end_time . "')) UNION ";
		}
	}
	if (substr($nested_query_temp_table, -7) == " UNION ")
		$nested_query_temp_table = substr($nested_query_temp_table, 0, -7); // remove last " UNION "
}

/**
 * string string string string string -> string
 * Execute query, and assemble result into a human-readable format.
 *
 * @param $myql_query The query statement
 * @param $building_name The human-readable name of the building
 * @param $start_time The start date/time of the event, in DATE_FORMAT
 * @param $end_time The start date/time of the event, in DATE_FORMAT
 * @param $resource_type The resource type's id.
 * @param $resource_types Array of resource types (initialized by initialize_resource_types)
 * @param $buildings Array of buildings (initialized by initialize_buildings)
 * 
 * @return $result Human-readable string result of the query.
 */
function get_empty_resource_query_result($mysql_query, $building_name, $start_time, 
	$end_time, $resource_type, &$resource_types, &$buildings,  $all_types, $all_buildings, $get_result = 1) {

	$type = $all_types ? "resource types" : $resource_types[$resource_type]->get_plural_name();
	$header = 'Available ' . $type;
	$resource_result = '';
	$result = '';
	$in = ' in ';
	
	if ($get_result != 1) {
		$error_str = 'Sorry, there are no ';
		$check_str = '. Please check your search terms.';
		if ($get_result == 0) {
			$error_str .= $type . $in . $building_name;
		} else if ($get_result == -1) {
			$error_str .= $type;
		} else { // if ($get_result == -2) 
			$error_str .= "searchable entity types";
		}
		return $error_str . $check_str;
	}

	$time_interval = get_time_interval_str($start_time, $end_time);
	dpm("RESULT");
	dpm($time_interval);
	
	// Execute the query
	$query = db_query($mysql_query);

	if ($all_buildings) {
		 if ($all_types) {
			$resource_result = get_all_buildings_all_types_result($query, $resource_types, $buildings);
		} else {  // !$all_types
			$resource_result = get_all_buildings_not_all_types_result($query, $resource_types, $buildings, $resource_type);
		}
	} else { // !$all_buildings (!$all_buildings && $all_types) 
		$header .= $in . $building_name . ' ';
		 if ($all_types) {
			$resource_result = get_not_all_buildings_all_types_result($query, $resource_types, $buildings);
		} else {  // !$all_types
			$resource_result = get_not_all_buildings_not_all_types_result($query, $resource_types, $buildings, $resource_type);
		}
	}
	if (trim($resource_result) == '' || trim($resource_result, '<br>') == '') { 	
	/// if ($all_buildings == 0 || $all_buildings == NULL) { //
		if (!$all_buildings) {
		//  If some specific building is selected, then query the field_building table 
		// to see if the building has resources of resource_type 
		/* Assumption: Most users are smart enough to realize that there are no classresources in ICCS,
		 * so this is a rare case. This case is also caught above, but we do it here again in case the
		 * query returns nothing. So it is performed very rarely*/
			$rt_object = $resource_types[$resource_type];
			$rt_in_building_count = building_has_resource_type_query($building_name, $rt_object, $all_types, $resource_types, $resource_type);
			if ($rt_in_building_count == 0) {
	
				$result = 'Sorry, there are no ' . $type . $in . $building_name . '. Please check your search terms.';
				return $result;
			} 
		} 
		$result = 'No available ' . $type;
		$result .= $all_buildings ? '' : $in .  $building_name;
		$result .= $time_interval;
	}	else {
		$result = $header . $time_interval . ': <br>' . $resource_result;
	}
	return $result;
} 

/**
 * array -> string
 * Extract available-resource query result, given "all buildings"
 * and "all resource types" filters. (get_empty_resource_result helper)
 *
 * @param $query Availble resource query result in raw format
 * @param $resource_types Array of resource types (initialized by initialize_resource_types)
 * @param $buildings Array of buildings (initialized by initialize_buildings)
 *
 * @return Human-readable result
 */
function get_all_buildings_all_types_result($query, $resource_types, $buildings) {
	$ender = 's: ';
	
	$temp_array = array();
	reset($resource_types);
	
	//$temp_array maps string -> Pair<string, string> (see corresp. class below)
	// 	ResourceType->machine_name => Pair<resource_result_string, get_title()>
	$temp_array = make_machine_name_string_title_pair($resource_types);
	$resources_so_far = array();
	foreach($query as $r) {
		$rtype = $r->type;
		$rt_object = $resource_types[$rtype];
		$fbld_value = $rt_object->get_building_field();
		$frn_value = $rt_object->get_room_number_field();
		$resource = $r->$fbld_value . $r->$frn_value;
		append_all_resource_types_query_result($temp_array, $resource, $rtype, $ender, $resources_so_far);
	}
	$resource_result = '';
	foreach ($temp_array as $temp) {
		$resource_result .= $temp->get_first();
	}
	return $resource_result;
} 

/**
 * array -> string
 * Extract available-resource query result, given "all buildings"
 * and specific resource type filters. (get_empty_resource_result helper)
 *
 * @param $query Availble resource query result in raw format
 * @param $resource_types Array of resource types (initialized by initialize_resource_types)
 * @param $buildings Array of buildings (initialized by initialize_buildings)
 *
 * @return Human-readable result
 */
function get_all_buildings_not_all_types_result($query, $resource_types, $buildings, $resource_type) {
	$resource_result = '';
	$resources_so_far = array();
	$rt_object = $resource_types[$resource_type];
	$fbld_value = $rt_object->get_building_field();
	$frn_value = $rt_object->get_room_number_field();
	foreach($query as $r) {
			$resource = $r->$fbld_value . $r->$frn_value;
			append_not_all_resource_types_query_result($resource_result, $resource, $resources_so_far);
		}
	return $resource_result;
}

/**
 * array -> String
 * Extract available-resource query result, given specific building
 * and "all resource types" filters. (get_empty_resource_result helper)
 *
 * @param $query Availble resource query result in raw format
 * @param $resource_types Array of resource types (initialized by initialize_resource_types)
 * @param $buildings Array of buildings (initialized by initialize_buildings)
 *
 * @return Human-readable result
 */
function get_not_all_buildings_all_types_result($query, $resource_types, $buildings) {
	$resource_result = '';
	$ender = 's: ';
	
	$temp_array = array();
	reset($resource_types);

	//$temp_array maps string -> Pair<string, string> (see corresp. class below)
	// 	ResourceType->machine_name => Pair<resource_result_string, get_title()>
	$temp_array = make_machine_name_string_title_pair($resource_types);
	$resources_so_far = array();	
	foreach($query as $r) {
		$rtype = $r->type;
		$rt_object = $resource_types[$rtype];
		$frn_value = $rt_object->get_room_number_field();
		$resource = $r->$frn_value;
		
		append_all_resource_types_query_result($temp_array, $resource, $rtype, $ender, $resources_so_far);
	}
	
	foreach ($temp_array as $temp) {
		$resource_result .= $temp->get_first();
	}
	return $resource_result;
} 

/**
 * array -> string
 * Extract available-resource query result, given specific building
 * and specific resource type filter. (get_empty_resource_result helper)
 *
 * @param $query Availble resource query result in raw format
 * @param $resource_types Array of resource types (initialized by initialize_resource_types)
 * @param $buildings Array of buildings (initialized by initialize_buildings)
 *
 * @return Human-readable result
 */
function get_not_all_buildings_not_all_types_result($query, $resource_types, $buildings, $resource_type) {
	$resource_result = '';
	$resources_so_far = array();
	$rt_object = $resource_types[$resource_type];
	$frn_value = $rt_object->get_room_number_field();
	foreach($query as $r) {
		$resource = $r->$frn_value;
		append_not_all_resource_types_query_result($resource_result, $resource, $resources_so_far);
	}
	return $resource_result;
}

/**
 * String String Natural[0, 1] -> Natural
 *
 * Checks if $building_name has the given resource type.
 * Assumption: We will never have a resource type without at least
 * one existing resource of that type, but we can have buildings
 * with no resources of a given (or all) type(s).
 *
 * @param $building_name The name of the building
 * @param $rt_machine_name The machine name of the resource type.
 * @param $all_types 1 when a specific resource type is provided, 0 otherwise.
 *
 * @param $resource_type The string key of $resource_types (e.g. type0)
 *
 * @return 0 if no resources of this type exist in the building, >0 otherwise.
 */

function building_has_resource_type_query($building_name, $rt_object, $all_types, $resource_types, $resource_type) {
	$fbld_field = $rt_object->get_building_field();
	$fbld_table = $rt_object->get_building_table();
	$rt_machine_name = $rt_object->get_machine_name();
	$count = 0;
	$building_query = "SELECT COUNT(entity_id) AS cnt 
		FROM " . $fbld_field . " WHERE " . $fbld_field . " = '" . $building_name . "'";
	if (!$all_types) {
		foreach ($resource_types[$resource_type]->get_buildings() as $b) {
			if ($b->get_name() == $building_name && $b->get_auth_display() == 0)
				return 0;
		}
		$building_query .= " AND bundle = '" . $rt_machine_name . "'";
	} else if ($all_types && !empty($resource_types)) {
		$building_query .= " AND (";
		foreach ($resource_types as $rt => $object) {
			if ($object->get_auth_display() == 1)
				$building_query .= "bundle = '" . $object->get_machine_name() . "' OR ";
		}
		$building_query = substr($building_query, 0, -4) . ")"; // trim off last " OR ";
	}
	
	$query = db_query($building_query);
	foreach ($query as $q) {
		$count += $q->cnt;
	}
	return $count;
}

function get_time_interval_str($start_time, $end_time) {
	$str_sdate = strtotime($start_time);
	$str_edate = strtotime($end_time);
	dpm(date('h:i l, F jS', $str_edate));
	$day_equals = (date('Y-m-d', $str_sdate) == date('Y-m-d', $str_edate));
	$year_equals = (date('Y', $str_sdate) == date('Y', $str_edate)); 
	$time_interval = "";
	
	if ($day_equals) {
		$time_interval = ' on ' . date('l, F jS', $str_sdate) . ' from ' .
			date('h:i', $str_sdate) . ' to ' . date('h:i', $str_edate);
	} else {
		$dte_format = 'h:i l, F jS';
		if (!$year_equals) $dte_format .= ', Y';
		$time_interval = ' from ' . date($dte_format, $str_sdate) . 
			' to ' . date($dte_format, $str_edate);
	}
	
	return $time_interval;
}

/**
 * ===============================================
 * ASSORTED HELPERS
 * ===============================================
 */

/**
 * String Natural -> String
 * Rounds a date to the nearest 15 minutes.
 *
 * @param $some_time The date, e.g. '2010-05-31 16:00'
 * @param $noworlater indicates x hours from now. Needed b/c time(some_date) returns the current time
 * @return The date rounded to the nearest 15 minutes.
 */
function round_to_nearest_15_minutes($some_date, $noworlater, $date_format) {
	$the_time = time($some_date) + $noworlater * 3600;
	$rounded_numerator = 15 * 60;
	$the_date = '';
	$minutes = $the_time % $rounded_numerator;
	if ($minutes <= 7 * 60) {
		$the_date = date($date_format, $the_time - $the_time % $rounded_numerator);
	} else {
		$the_date = date($date_format, $the_time + 15 * 60 - $the_time % $rounded_numerator);
	}
	return $the_date;
}

/**
 * Constructs an associative array of ResourceType => Pair<string, string>, 
 * specifically ResourceType => Pair<'<br>', ResourceType->get_title()>
 *
 * @param $resource_types The array of resource types (see resource type initializer function)
 *
 * @return the aforementioned associative array.
 */
function make_machine_name_string_title_pair($resource_types) {
	$assoc_array = array();
	foreach ($resource_types as $rt) { 
		$assoc_array[$rt->get_machine_name()] = new Pair('', $rt->get_title());
	}
	return $assoc_array;
}

/**
 * assoc_array string string -> (void)
 * Adds the result from $resource to the existing result in the array
 * 
 * @param temp_array An associative array of ResourceType =>
 *   Pair<'resultsofar', ResourceType->get_title()>
 * @param $resource The resource building/number 
 * @param $rtype The resource type as returned by the query (machine_name)
 * @param $ender The ender string for the result
 */
function append_all_resource_types_query_result(&$temp_array, $resource, $rtype, $ender, &$resources_so_far) {
 	$current_result = $temp_array[$rtype]->get_first();
	if ($current_result == '') {
		array_push($resources_so_far, $resource);
		$temp_array[$rtype]->set_first(
			'<br> ' . $temp_array[$rtype]->get_second() . $ender . $resource
		);
	} else {
		if (in_array($resource, $resources_so_far)) return;
		array_push($resources_so_far, $resource);
		$temp_array[$rtype]->set_first($current_result . ', ' . $resource);
	} 
}

function append_not_all_resource_types_query_result(&$resource_result, $resource, &$resources_so_far) {
	if (strlen($resource_result) > 0)	{
		if (in_array($resource, $resources_so_far)) return;
		array_push($resources_so_far, $resource);
		$resource_result .=  ', ' . $resource;
		return;
	}
	array_push($resources_so_far, $resource);
	$resource_result .= $resource;
}

/**
 * ===============================================
 * ===============================================
 *
 * BLOCK SETTINGS FORM
 *
 * ===============================================
 * ===============================================
 */

define("RESOURCE_SEARCH", 'resource_search');
	
 /**
	* Implements hook_block_info().
	*/
function is_available_block_info() {
	$blocks = array();
	$blocks[RESOURCE_SEARCH] = array(
		'info' => t('Check Resource Availability'),
		'cache' => DRUPAL_NO_CACHE,
		'mb_enabled' => TRUE,
	);
	return $blocks;
}

/**
 * Implements hook_block_configure(). 
 * All resources are viewable by default (in the impl. of the actual form)
 * Using a patch from #5 in https://drupal.org/node/1370966
 * Patch at https://drupal.org/files/fix_config_per_instance-1370966-5.patch
 */
function is_available_block_configure($delta = '', $multi_id = NULL) {
	if ($delta != RESOURCE_SEARCH && $delta != 'room_search') {
		drupal_set_message("If you can read this, the resource settings have not loaded.
			Your block delta: " . $delta . " may have changed -- please check your settings.", "error");
		return;
	}
	
	$form_object 			= new IsAvailableAdminSettingsForm;
	$module_name 			= $form_object->get_module_name();
	$setting_options 	= get_radios_setting_options($multi_id);
	$setting_key 		= $module_name . '_block_setting_' . $multi_id;
	
	$form[$setting_key] = array(
		'#type' 					=> 'radios',
		'#title' 					=> t('Setting Options (set in /admin/config/is_available/settings)'),
		'#options' 				=> $setting_options,
		'#default_value' 	=> variable_get($setting_key, key($setting_options)),
	);
	
	return $form;
}
	
/**
 * Implements hook_block_save().
 * Using a patch from #5 in https://drupal.org/node/1370966
 * Patch at https://drupal.org/files/fix_config_per_instance-1370966-5.patch
 */
function is_available_block_save($delta = '', $edit = array()) {

	if ($delta != RESOURCE_SEARCH && $delta != 'room_search') {
		drupal_set_message("Your resource settings were not saved -- your block 
			delta is " . $delta . ", and it may have changed -- please check your settings.", "error");
		return;
	}
	$form_object 		= new IsAvailableAdminSettingsForm;
	$module_name 		= $form_object->get_module_name();
	$multi_id				= $edit['multiblock_delta']['#value'];
	$setting_key 		= $module_name . '_block_setting_' . $multi_id;
	$setting_title	= strtr($setting_key, array('setting' => 'title'));
	
	variable_set($setting_key, $edit[$setting_key]); // contains the letter index, e.g. a

}

/**
 * Implements hook_block_view().
 * Using a patch from #5 in https://drupal.org/node/1370966
 * Patch at https://drupal.org/files/fix_config_per_instance-1370966-5.patch
 */
 // How the block is viewed
function is_available_block_view($delta = '', $multi_id = NULL) {
	if ($multi_id == NULL) {
		drupal_set_message('Error: No multiblock id detected.', 'error');
		return;
	}
	
	$form_object 	= new IsAvailableAdminSettingsForm;
	$module_name 	= $form_object->get_module_name();
	$title				= $module_name . '_block_setting_' . $multi_id;
	$setting_id 	= variable_get($title, '');
	$array_et 		= block_view_get_entity_types($setting_id, $form_object);
	block_view_get_resource_types($array_et, $setting_id, $form_object);
	
	$block = array(
		'subject' => t('Search for vacancy'),
		'content' => drupal_get_form('is_available_resource_search_form', $array_et, $multi_id),
	); 
	
	return $block;
}

function get_radios_setting_options($multi_id) {
	$form_object = new IsAvailableAdminSettingsForm;
	$module_name = $form_object->get_module_name();
	$leading_str = $module_name . '_settings_title_';
	$leading_str_strlen = strlen($leading_str);
	$alpha			 = $form_object->get_alphabet();
	$i		 			 = $form_object->get_settings_count();
	$ret_array	 = array();

	$query1 = db_query("SELECT name FROM variable WHERE name LIKE '" . $leading_str . "%'");
	foreach ($query1 as $q) {
		$sid = substr($q->name, $leading_str_strlen);
	
		$query2 = db_query("SELECT COUNT(name) as cnt FROM variable WHERE name LIKE '" .
			$module_name . "_%" . $sid . "%'");
		$sid_count = 0;
		foreach ($query2 as $q2) {
			$sid_count = $q2->cnt;
		}
		if ($sid_count >= 9)
		$ret_array[$sid] = variable_get($leading_str . $sid, 'Setting ' . strtoupper($sid));
	}
	
	return $ret_array;
}
	

/**
 * ============================================================================
 * ============================================================================
 * INITIALIZER FUNCTIONS
 * ============================================================================
 * ============================================================================
 */

 /**
  * Initialize resource type and building arrays.
	* @param $array_et Array of entity types
	* @param $array_rt Array of resource types
	* @param $array_buildings Array of buildings to search over
	*/
function initialize_resource_types_and_buildings_and_options($array_et, &$array_rt,	&$array_rt_options, &$array_buildings, &$array_building_options, &$array_fbld_field, &$array_frn_field, $all) {
	
	// "- All-" by default is always first.
	$array_rt = array(); // clear the existing rt and building arrays
	$array_rt_options = array();
	$array_buildings = array();
	$array_building_options = array();
	
	// All resource types (displayed) that are selected to be searched over.
	$array_rt_options = array($all => $all);  
	$array_building_options = array($all => $all);

	$rt_i = 0;
	$bldg_j = 0;
	foreach ($array_et as $et_machine_name => $et_object) {
		foreach ($et_object->get_resource_types() as $rt_machine_name => $rt_object) {
			$rt_mn = $rt_object->get_machine_name();
			$fbld = $rt_object->get_field_building();
			$frn = $rt_object->get_field_room_number();
			if (!array_key_exists($rt_mn, $array_rt)) {
				$array_rt[$rt_mn] = $rt_object;
				$array_rt_options[$rt_object->get_str_id()] = $rt_object->get_title();
				if (!in_array($fbld, $array_fbld_field)) $array_fbld_field["FBLD" . $bldg_j++] = $fbld;
				if (!in_array($frn, $array_frn_field))	$array_frn_field["FRN" . $rt_i++] = $frn;
				foreach ($rt_object->get_buildings() as $bldg_name => $bldg_object) {
					$bldg_str_id = $bldg_object->get_str_id();
					if (!array_key_exists($bldg_str_id, $array_buildings)) {
						$array_buildings[$bldg_str_id] = $bldg_object;
						$array_building_options[$bldg_str_id] = $bldg_object->get_name();
					}
				}
			}
		}
	}
}



/**
 * =====================================================
 * BLOCK SETTINGS FORM
 * =====================================================
 */
function block_view_get_entity_types($setting_id, $form_object) {
	// e.g. is_available_entity_type_a_space
	$module_name			= $form_object->get_module_name();
	$key_entity_type	= $form_object->get_key_entity_type();
	$key_entity_type 	= $module_name . '_' . $key_entity_type . '_' . $setting_id . '_';
	$leading_strlen		= strlen($key_entity_type);
	$ret_array 				= array();
	
	$query1 = block_view_helper_get_varname_like_query($key_entity_type);
	if (!empty($query1)) {
		foreach ($query1 as $q1) {
			// construct entitytype objects out of all the auth'd entity types
			if (variable_get($q1->name, 0) == 1) {
				$et_machine_name = substr($q1->name, $leading_strlen);
				$et_label = block_view_helper_get_label('eck_entity_type', $et_machine_name);
				$ret_array[$et_machine_name] = new EntityTaipe($et_machine_name, $et_label);
			}
		}
	}
	return $ret_array;	
}

/**
 * (arrayof string => EntityTaipe) -> (void)
 */
function block_view_get_resource_types(&$array_et_objects, $setting_id, $form_object) {
	// is_available_resource_type_a_space_meeting_resource
	$module_name		= $form_object->get_module_name();
	$key_resource_type	= $form_object->get_key_resource_type();
	$key_resource_type 	= $module_name . '_' . $key_resource_type . '_' . $setting_id . '_';
	
	if (empty($array_et_objects)) {
		drupal_set_message('Error: No selected entity types detected. Please check your settings.', 'error');
		return;
	}

	foreach ($array_et_objects as $et_machine_name => $et_object) {
		$array_resource_types = array();
		$key_rt = $key_resource_type . $et_machine_name . '_';
		$leading_strlen = strlen($key_rt);
		$query1 = block_view_helper_get_varname_like_query($key_rt);
		if (!empty($query1)) {
			foreach ($query1 as $q1) {
				if (variable_get($q1->name, 0) == 1) {
					$rt_machine_name = substr($q1->name, $leading_strlen);
					$rt_label = block_view_helper_get_label('eck_bundle', $rt_machine_name);
					$resource_type = new ResourceType($rt_machine_name, array(), $rt_label); 
					configure_resource_type($resource_type, $et_machine_name, $setting_id, $form_object);
					$array_resource_types[$rt_machine_name] = $resource_type;
				}
			}
			$et_object->set_resource_types($array_resource_types);
		}
	}
}

function configure_resource_type(&$rt_object, $et_machine_name, $setting_id, $form_object) {
	block_view_get_rt_brn_table($rt_object, $et_machine_name, $setting_id, $form_object);
	block_view_get_auth_buildings($rt_object, $et_machine_name, $setting_id, $form_object);
	block_view_get_entref_date_tables($rt_object, $et_machine_name, $setting_id, $form_object);
}

function block_view_get_rt_brn_table(&$rt_object, $et_machine_name, $setting_id, $form_object) {
	// is_available_building_table_a_space_meeting_resource
	$module_name		= $form_object->get_module_name();
	$et_rt 					= $et_machine_name . '_' . $rt_object->get_machine_name();
	$key_building 	= $form_object->get_key_building_table();
	$key_rn					= $form_object->get_key_resource_number_table();
	
	$building_term 	= $module_name . '_' . $key_building . '_' . $setting_id .	'_' . $et_rt;
	$rn_term				= $module_name . '_' . $key_rn . '_' . $setting_id . 	'_' . $et_rt;
	
	$building_field	= variable_get($building_term, '');
	$rn_field				= variable_get($rn_term, '');
	
	$rt_object->set_field_building($building_field);
	$rt_object->set_field_room_number($rn_field);
}

function block_view_get_auth_buildings(&$rt_object, $et_machine_name, $setting_id, $form_object) {
	// is_available_auth_building_a_space_mr_FSC
	$ret_array					= array(); // an array of building objects
	$module_name				= $form_object->get_module_name();
	$et_rt 							= $et_machine_name . '_' . $rt_object->get_machine_name();
	$key_auth_building 	= $form_object->get_key_auth_buildings();
	$key_auth_building	= $module_name . '_' . $key_auth_building . '_' . $setting_id . '_' . $et_rt . '_';
	$leading_strlen			= strlen($key_auth_building);
	$query = block_view_helper_get_varname_like_query($key_auth_building);
	
		if (empty($query)) {
			drupal_set_message('Error: No selected buildings detected. Please check your settings.', 'error');
			return;
	}
	
	foreach ($query as $q) {
		if (variable_get($q->name, 0) == 1) {
			$bldg_name = substr($q->name, $leading_strlen);
			$ret_array[$bldg_name] = new Building($bldg_name);
		}
	}
	
	$rt_object->set_buildings($ret_array);
}

function block_view_get_entref_date_tables(&$rt_object, $et_machine_name, $setting_id, $form_object) {
	// is_available_entref_space_meeting_resource_event_a
	// is_available_date_space_meeting_resource_a_event
	$module_name 	= $form_object->get_module_name();
	$key_entref		= $form_object->get_key_entref();
	$key_date			= 'date';
	$et_rt				= $et_machine_name . '_' . $rt_object->get_machine_name();
	$key_entref 	= $module_name . '_' . $key_entref . '_' . $et_rt . '_';
	$key_date			= $module_name . '_' . $key_date . '_' . $et_rt . '_' . $setting_id . '_';
	$array_entref_date = array();

	block_view_get_content_types($rt_object, $et_machine_name, $setting_id, $form_object);
	$content_types = $rt_object->get_content_types();

	if (empty($content_types)) return;
	
	foreach ($content_types as $ct_machine_name) {
		$kentref		= $key_entref . $ct_machine_name . '_' . $setting_id;
		$kdate			= $key_date . $ct_machine_name;
		$entref_tbl	= variable_get($kentref, '');
		$date_tbl		= variable_get($kdate, '');
		$array_entref_date[$entref_tbl] = $date_tbl;
	}
	
	if (empty($array_entref_date)) {
		drupal_set_message('Error: Entity reference or date table selection not detected. 
			Please check your settings.', 'error');
		return;
	}
	
	$rt_object->set_entref_date_tables($array_entref_date);
}
		
	

function block_view_get_content_types(&$rt_object, $et_machine_name, $setting_id, $form_object) {
	// is_available_content_type_space_meeting_resource_a_event
	$module_name 			= $form_object->get_module_name();
	$key_content_type	= $form_object->get_key_content_type();
	$et_rt						= $et_machine_name . '_' . $rt_object->get_machine_name();
	$key_content_type	= $module_name . '_' . $key_content_type . '_' . $et_rt . '_' . $setting_id . '_';
	$leading_strlen		= strlen($key_content_type);
	$array_ct					= array();
	$query 						= block_view_helper_get_varname_like_query($key_content_type);
	
	if (empty($query)) {
		drupal_set_message('Error: No selected content types detected for ' . 
			convert_to_readable_name($et_machine_name) . ': ' .$rt_object->get_title() 
			. '. Please check your settings.', 'error');
		return array();
	}
	
	foreach ($query as $q) {
		if (variable_get($q->name, 0) == 1) {
			$ctype				= substr($q->name, $leading_strlen);
			$array_ct[$ctype] = $ctype;
		}
	}
	
	if (empty($array_ct)) {
		drupal_set_message("Error: No selected content types detected.", 'error');
		return;
	}
	$rt_object->set_content_types($array_ct);
}

function block_view_helper_get_varname_like_query($term) {
	$term .= '%';
	$term = mysql_real_escape_string($term);

	return db_query("SELECT name FROM variable WHERE name LIKE :term", array(':term' => $term));
}

/**
 * string string -> string
 */
function block_view_helper_get_label($table, $machine_name) {
	$ret_str = '';
	$query = db_query("SELECT label FROM " . $table . " WHERE name = '" . $machine_name . "'");
	foreach ($query as $q) {
		$ret_str = $q->label;
	}
	return $ret_str;
}

function get_mysql_24h_date($ampm_date) {
	// Y-m-d h:ia format
	$str_splode = explode(" ", $ampm_date);
	$time = explode(":", $str_splode[1]);
	$hr = $time[0];
	switch ($hr) {
		case 12:
			if ($time[1] == 'am') $hr = 00;
			break;
		default:
			if ($time[1] == 'pm') $hr += 12;
			break;
	}
	return $str_splode[0] . " " . $hr . ":" . substr($time[1], 0, 2);
}
